" don't bother with vi compatibility
set nocompatible

" enable syntax highlighting
syntax enable
set rtp+=/usr/local/opt/fzf

call plug#begin()
  if filereadable(expand("~/.vimrc.bundles"))
    source ~/.vimrc.bundles
  endif
call plug#end()

" styling
colorscheme jellybeans
let g:airline_powerline_fonts = 1

" ensure ftdetect et al work by including this after the Vundle stuff
filetype plugin indent on

set autoindent
set autoread                                                 " reload files when changed on disk, i.e. via `git checkout`
set backspace=2                                              " Fix broken backspace in some setups
set backupcopy=yes                                           " see :help crontab
set clipboard=unnamed                                        " yank and paste with the system clipboard
set directory-=.                                             " don't store swapfiles in the current directory
set expandtab                                                " expand tabs to spaces
set hlsearch
set ignorecase                                               " case-insensitive search
set incsearch                                                " search as you type
set laststatus=2                                             " always show statusline
set list                                                     " show trailing whitespace
set listchars=tab:▸\ ,nbsp:¬,extends:»,precedes:«,trail:•
set nospell
set number                                                   " show line numbers
set ruler                                                    " show where you are
set scrolloff=3                                              " show context above/below cursorline
set shiftwidth=2                                             " normal mode indentation commands use 2 spaces
set showcmd
set smartcase                                                " case-sensitive search if any caps
set softtabstop=2                                            " insert mode tab and backspace use 2 spaces
set signcolumn=yes                                           " git gutter signcolumn
set splitbelow                                               " split below during horizontal split
set splitright                                               " split right during vertical split
set tabstop=8                                                " actual tabs occupy 8 characters
set undofile                                                 " persistant undo between sessions
set undodir=~/.vim/undodir
set wildignore=log/**,node_modules/**,target/**,tmp/**,*.rbc
set wildmenu                                                 " show a navigable menu for tab completion
set wildmode=longest,list,full

" Enable basic mouse behavior such as resizing buffers.
set mouse=a
if exists('$TMUX') && !has('nvim') " Support resizing in tmux
  set ttymouse=xterm2
else
  " Mad hax since nvim remaps C-h to BS
  nnoremap <silent> <BS> :TmuxNavigateLeft<cr>
endif

" Ale
let g:ale_linters = {'javascript': ['eslint'], 'ruby': ['rubocop']}
let g:ale_javascript_eslint_executable = 'eslint'
let g:ale_javascript_eslint_use_global = 0
let g:ale_sign_column_always = 1
let g:ale_lint_delay = 1500

" keyboard shortcuts
let mapleader = ','
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
noremap <leader>l :Align
nnoremap <leader>d :NERDTreeToggle<CR>
nnoremap <leader>f :NERDTreeFind<CR>
nnoremap <leader>e :FZF<CR>
nnoremap <leader>a :Ag<space>
nnoremap <leader>b :Buffers<CR>
nnoremap <leader>E :CtrlPClearCache<CR>:CtrlP<CR>
nnoremap <leader>] :TagbarToggle<CR>
nnoremap <leader>. :Tags<CR>
nnoremap <leader><space> :call whitespace#strip_trailing()<CR>
nnoremap <leader>g :GitGutterToggle<CR>
noremap <silent> <leader>V :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>

" in case you forgot to sudo
cnoremap w!! %!sudo tee > /dev/null %

" plugin settings
" TODO: disable gitgutter for large files
let g:gitgutter_enabled = 1
runtime macros/matchit.vim
let g:gist_clip_command = 'pbcopy'
let g:gist_detect_filetype = 1
let g:gist_show_privates = 1
let g:gist_post_private = 1
let g:gist_open_browser_after_post = 1
let g:sql_type_default = 'pgsql'
let vim_markdown_preview_github=1
let g:fzf_buffers_jump = 1

" DELIMITMATE
" Expand <cr> to indent the line between delimiters
let g:delimitMate_expand_cr=1
" Expand <space> to insert a space around the cursor
let g:delimitMate_expand_space=1

" Snips
let g:UltiSnipsExpandTrigger="<C-j>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
inoremap <expr><TAB> pumvisible() ? "\<c-n>" : "\<tab>"
inoremap <expr><S-TAB> pumvisible() ? "\<c-p>" : "\<tab>"


" Allow triple ` in markdown
au FileType markdown let b:delimitMate_nesting_quotes=['`']
" END DELIMITMATE

" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
" Use Ag over Grep
if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor
endif

let test#strategy = "dispatch"
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>A :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>

" fdoc is yaml
autocmd BufRead,BufNewFile *.fdoc set filetype=yaml
" md is markdown
autocmd BufRead,BufNewFile *.md set filetype=markdown

" TODO: update to rtp/ftplugin setup
au FileType go call SetGolangOptions()
function SetGolangOptions()
  let g:go_fmt_command = "goimports"
  set tabstop=4
  set shiftwidth=4
  set softtabstop=4
  set noexpandtab
  au FileType go nmap <leader>r <Plug>(go-run)
  au FileType go nmap <leader>b <Plug>(go-build)
  au FileType go nmap <leader>t <Plug>(go-test)
  au FileType go nmap <leader>c <Plug>(go-coverage)
  compiler go
endfunction

" extra rails.vim projections
" Add policies/serializers/etc eventually
let g:rails_projections = {
\   "app/presenters/*_presenter.rb": {
\     "command": "presenter",
\     "template": ["class {camelcase|capitalize|colons}Presenter", "end"],
\     "test": [ "spec/presenters/{}_presenter_spec.rb" ]
\   },
\   "app/jobs/*_job.rb": {
\     "command": "job",
\     "template":
\       [
\         "class {camelcase|capitalize|colons}Job < ActiveJob::Base",
\         "\tqueue_as :default",
\         "",
\         "\tdef perform",
\         "\tend",
\         "end"
\       ],
\     "test": [
\       "spec/jobs/{}_job_spec.rb"
\     ]
\   },
\   "app/services/*_service.rb": {
\     "command": "service",
\     "template": ["class {camelcase|capitalize|colons}Service", "end"],
\     "test": [ "spec/services/{}_service_spec.rb" ]
\   },
\   "spec/factories/*.rb": {
\     "command": "factory",
\     "affinity": "model",
\     "template": [
\       "FactoryGirl.define do",
\         "factory :{underscore|plural} do",
\         "end",
\       "end"
\     ],
\     "alternate": "app/models/{singular}.rb"
\   }
\ }

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" Fix Cursor in TMUX
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" Don't copy the contents of an overwritten selection.
vnoremap p "_dP

xnoremap @ :<C-u>call ExecuteMacroOverVisualRange()<CR>

function! ExecuteMacroOverVisualRange()
  echo "@".getcmdline()
  execute ":'<,'>normal @".nr2char(getchar())
endfunction

" Neoformat
" Formatting
if executable('prettier')
  autocmd FileType javascript setlocal formatprg=prettier\ --stdin\ --single-quote
endif

let g:neoformat_try_formatprg = 1

" augroup fmt
"   autocmd!
"   autocmd BufWritePre * Neoformat
" augroup END

function s:check_backspace() abort
  let ccc = col('.')
  return !ccc || getline('.')[ccc-1] =~ '\s'
endfunction

autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
